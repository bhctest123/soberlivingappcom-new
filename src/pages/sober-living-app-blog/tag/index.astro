---
import BaseLayout from '@layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

// Get all published blog posts
const allPosts = await getCollection('blog', ({ data }: { data: any }) => {
  return data.draft !== true;
});

// Extract and count all tags
const tagCounts = new Map<string, number>();
allPosts.forEach((post: any) => {
  if (post.data.tags && Array.isArray(post.data.tags)) {
    post.data.tags.forEach((tag: string) => {
      tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
    });
  }
});

// Sort tags alphabetically
const sortedTags = Array.from(tagCounts.entries()).sort((a, b) => 
  a[0].toLowerCase().localeCompare(b[0].toLowerCase())
);

// Generate URL-safe slug from tag name (preserving spaces as +)
const generateTagSlug = (tag: string) => {
  // Replace spaces with + to match original URL structure
  return tag.replace(/\s+/g, '+');
};

// Group tags by first letter for easier navigation
const tagsByLetter = new Map<string, Array<[string, number]>>();
sortedTags.forEach(([tag, count]) => {
  const firstLetter = tag[0].toUpperCase();
  if (!tagsByLetter.has(firstLetter)) {
    tagsByLetter.set(firstLetter, []);
  }
  tagsByLetter.get(firstLetter)?.push([tag, count]);
});

// SEO structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Blog Tags - Sober Living App",
  "description": "Browse all tags from the Sober Living App blog. Find articles by topic.",
  "url": `${Astro.site}sober-living-app-blog/tag`,
  "isPartOf": {
    "@type": "Blog",
    "name": "Sober Living App Blog",
    "url": `${Astro.site}sober-living-app-blog`
  },
  "publisher": {
    "@type": "Organization",
    "name": "Sober Living App",
    "logo": {
      "@type": "ImageObject",
      "url": `${Astro.site}images/brand/sober-living-app-text@2x.png`
    }
  }
};
---

<BaseLayout 
  title="All Tags - Sober Living App Blog"
  description="Browse all tags from the Sober Living App blog. Find articles organized by topic including NARR, regulations, funding, and more."
  structuredData={structuredData}
  canonical="https://soberlivingapp.com/sober-living-app-blog/tag"
>
  <main class="min-h-screen bg-background">
    <div class="container mx-auto px-4 py-16">
      <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-12">
          <!-- Breadcrumb -->
          <nav class="flex items-center text-sm text-muted-foreground mb-6" aria-label="Breadcrumb">
            <a href="/" class="hover:text-primary transition-colors">Home</a>
            <span class="mx-2">/</span>
            <a href="/sober-living-app-blog" class="hover:text-primary transition-colors">Blog</a>
            <span class="mx-2">/</span>
            <span class="text-foreground">Tags</span>
          </nav>

          <h1 class="text-4xl md:text-5xl font-bold mb-4">
            All Blog Tags
          </h1>
          <p class="text-xl text-muted-foreground max-w-3xl">
            Explore {sortedTags.length} tags across our blog articles. Click any tag to see related posts.
          </p>
        </div>

        <!-- Quick Navigation -->
        <div class="mb-8 p-4 bg-gray-50 rounded-lg">
          <h2 class="text-sm font-semibold text-gray-700 mb-3">Jump to:</h2>
          <div class="flex flex-wrap gap-2">
            {Array.from(tagsByLetter.keys()).map((letter) => (
              <a 
                href={`#letter-${letter}`}
                class="inline-flex items-center justify-center w-8 h-8 text-sm font-medium border border-gray-300 rounded hover:bg-gray-100 transition-colors"
              >
                {letter}
              </a>
            ))}
          </div>
        </div>

        <!-- Tags by Letter -->
        <div class="space-y-12">
          {Array.from(tagsByLetter.entries()).map(([letter, tags]) => (
            <section id={`letter-${letter}`} class="scroll-mt-24">
              <h2 class="text-2xl font-bold mb-6 pb-2 border-b">
                {letter}
              </h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {tags.map(([tag, count]) => {
                  const tagSlug = generateTagSlug(tag);
                  return (
                    <a 
                      href={`/sober-living-app-blog/tag/${tagSlug}`}
                      class="group flex items-center justify-between p-4 border rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all"
                    >
                      <span class="font-medium group-hover:text-blue-700">
                        {tag}
                      </span>
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 group-hover:bg-blue-100 group-hover:text-blue-800">
                        {count} post{count !== 1 ? 's' : ''}
                      </span>
                    </a>
                  );
                })}
              </div>
            </section>
          ))}
        </div>

        <!-- Popular Tags Section -->
        <section class="mt-16 border-t pt-12">
          <h2 class="text-2xl font-bold mb-6">Popular Tags</h2>
          <div class="flex flex-wrap gap-3">
            {sortedTags
              .sort((a, b) => b[1] - a[1]) // Sort by count descending
              .slice(0, 20) // Top 20 tags
              .map(([tag, count]) => {
                const tagSlug = generateTagSlug(tag);
                // Determine size based on count
                const sizeClass = count > 10 ? 'text-base px-5 py-2.5' : 
                                count > 5 ? 'text-sm px-4 py-2' : 
                                'text-sm px-3 py-1.5';
                return (
                  <a 
                    href={`/sober-living-app-blog/tag/${tagSlug}`}
                    class={`inline-flex items-center ${sizeClass} border border-gray-300 rounded-full hover:bg-gray-50 hover:border-blue-500 transition-all`}
                  >
                    {tag}
                    <span class="ml-2 text-xs text-gray-500">({count})</span>
                  </a>
                );
              })}
          </div>
        </section>

        <!-- Stats Section -->
        <section class="mt-16 grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="text-center">
            <div class="text-4xl font-bold text-blue-600 mb-2">
              {sortedTags.length}
            </div>
            <p class="text-gray-600">Total Tags</p>
          </div>
          <div class="text-center">
            <div class="text-4xl font-bold text-blue-600 mb-2">
              {allPosts.length}
            </div>
            <p class="text-gray-600">Tagged Articles</p>
          </div>
          <div class="text-center">
            <div class="text-4xl font-bold text-blue-600 mb-2">
              {Math.round(Array.from(tagCounts.values()).reduce((a, b) => a + b, 0) / sortedTags.length)}
            </div>
            <p class="text-gray-600">Avg. Posts per Tag</p>
          </div>
        </section>
      </div>
    </div>
  </main>
</BaseLayout>

<style>
  /* Smooth scrolling for anchor links */
  html {
    scroll-behavior: smooth;
  }
</style>